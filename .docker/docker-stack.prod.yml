x-common-deploy: &common-deploy
  replicas: 1
  update_config:
    parallelism: 1
    order: start-first
    failure_action: rollback
    delay: 10s
  restart_policy:
    condition: on-failure

x-common-healthcheck: &common-healthcheck
  interval: 10s
  timeout: 5s
  retries: 3
  start_period: 30s

x-backend-config: &backend-config
  image: ghcr.io/feedstand/backend:${VERSION_TAG:-latest}
  environment:
    SERVER_HOST: ${BACKEND_SERVER_HOST}
    SERVER_PORT: ${BACKEND_SERVER_PORT}
    DATABASE_HOST: ${BACKEND_DATABASE_HOST}
    DATABASE_PORT: ${BACKEND_DATABASE_PORT}
    DATABASE_NAME: ${BACKEND_DATABASE_NAME}
    DATABASE_USER: ${BACKEND_DATABASE_USER}
    DATABASE_PASS: ${BACKEND_DATABASE_PASS}
    QUEUE_HOST: ${BACKEND_QUEUE_HOST}
    QUEUE_PORT: ${BACKEND_QUEUE_PORT}
    SENTRY_DSN: ${BACKEND_SENTRY_DSN}
    SENTRY_ENVIRONMENT: ${BACKEND_SENTRY_ENVIRONMENT}

services:
  traefik:
    image: traefik:3
    command:
      - --providers.docker=false
      - --providers.swarm=true
      - --providers.swarm.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    deploy:
      placement:
        constraints:
          - node.role == manager

  frontend:
    image: ghcr.io/feedstand/frontend:${VERSION_TAG:-latest}
    environment:
      BACKEND_URL: ${FRONTEND_BACKEND_URL}
      SENTRY_DSN: ${FRONTEND_SENTRY_DSN}
      SENTRY_ENVIRONMENT: ${FRONTEND_SENTRY_ENVIRONMENT}
    deploy:
      <<: *common-deploy
      labels:
        - traefik.enable=true
        - traefik.http.routers.frontend.rule=Host(`app.feedstand.com`)
        - traefik.http.routers.frontend.entrypoints=websecure
        - traefik.http.routers.frontend.tls=true
        - traefik.http.routers.frontend.tls.certresolver=letsencrypt
        - traefik.http.routers.frontend.middlewares=frontend-secure@swarm
        - traefik.http.services.frontend.loadbalancer.server.port=4000
        - traefik.http.middlewares.frontend-secure.headers.sslRedirect=true
        - traefik.http.middlewares.frontend-secure.headers.stsSeconds=31536000
        - traefik.http.middlewares.frontend-secure.headers.stsPreload=true
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "wget", "-q", "--spider", "http://0.0.0.0:4000"]

  backend-server:
    <<: *backend-config
    environment:
      - FEATURE_MIGRATOR=true
      - FEATURE_SERVER=true
    deploy:
      <<: *common-deploy
      labels:
        - traefik.enable=true
        - traefik.http.routers.backend.rule=Host(`api.feedstand.com`)
        - traefik.http.routers.backend.entrypoints=websecure
        - traefik.http.routers.backend.tls=true
        - traefik.http.routers.backend.tls.certresolver=letsencrypt
        - traefik.http.routers.backend.middlewares=backend-secure@swarm
        - traefik.http.services.backend.loadbalancer.server.port=4001
        - traefik.http.middlewares.backend-secure.headers.sslRedirect=true
        - traefik.http.middlewares.backend-secure.headers.stsSeconds=31536000
        - traefik.http.middlewares.backend-secure.headers.stsPreload=true
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "wget", "-q", "--spider", "http://0.0.0.0:4001"]
    depends_on:
      - backend-migration

  backend-worker:
    <<: *backend-config
    environment:
      - FEATURE_WORKER=true
    deploy:
      <<: *common-deploy
      replicas: 1
    depends_on:
      - backend-migration

  database:
    image: postgres:17-alpine
    deploy:
      <<: *common-deploy
      placement:
        constraints:
          - node.role == manager
    environment:
      POSTGRES_DB: ${BACKEND_DATABASE_NAME}
      POSTGRES_USER: ${BACKEND_DATABASE_USER}
      POSTGRES_PASSWORD: ${BACKEND_DATABASE_PASS}
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host
    volumes:
      - database_data:/var/lib/postgresql/data
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "pg_isready"]

  queue:
    image: redis:7-alpine
    deploy:
      <<: *common-deploy
      placement:
        constraints:
          - node.role == manager
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: host
    volumes:
      - queue_data:/data
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "redis-cli", "ping"]

volumes:
  letsencrypt_data:
    driver: local
  database_data:
    driver: local
  queue_data:
    driver: local
