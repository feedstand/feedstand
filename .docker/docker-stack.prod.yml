x-common-deploy: &common-deploy
  update_config:
    order: start-first
    failure_action: rollback
  restart_policy:
    condition: on-failure

x-common-healthcheck: &common-healthcheck
  interval: 10s
  timeout: 5s
  retries: 3
  start_period: 30s

x-backend-config: &backend-config
  image: ghcr.io/feedstand/backend:${VERSION_TAG:-latest}
  depends_on:
    - pgbouncer
    - database

x-backend-environment: &backend-environment
  SERVER_HOST: 0.0.0.0
  SERVER_PORT: 4001
  DATABASE_HOST: pgbouncer
  DATABASE_NAME: ${BACKEND_DATABASE_NAME}
  DATABASE_USER: ${BACKEND_DATABASE_USER}
  DATABASE_PASS: ${BACKEND_DATABASE_PASS}
  QUEUE_HOST: queue
  SENTRY_DSN: ${BACKEND_SENTRY_DSN}
  SENTRY_ENVIRONMENT: ${BACKEND_SENTRY_ENVIRONMENT}

services:
  traefik:
    image: traefik:3
    command:
      - --providers.docker=false
      - --providers.swarm=true
      - --providers.swarm.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.pgbouncer.address=:5432
      - --entrypoints.queue.address=:6379
      - --certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
    deploy:
      placement:
        constraints:
          - node.role == manager
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host
      - target: 6379
        published: 6379
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt

  frontend:
    image: ghcr.io/feedstand/frontend:${VERSION_TAG:-latest}
    environment:
      BACKEND_URL: ${FRONTEND_BACKEND_URL}
      SENTRY_DSN: ${FRONTEND_SENTRY_DSN}
      SENTRY_ENVIRONMENT: ${FRONTEND_SENTRY_ENVIRONMENT}
    deploy:
      <<: *common-deploy
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.frontend.rule=Host(`app.feedstand.com`)
        - traefik.http.routers.frontend.entrypoints=websecure
        - traefik.http.routers.frontend.tls=true
        - traefik.http.routers.frontend.tls.certresolver=letsencrypt
        - traefik.http.routers.frontend.middlewares=frontend-secure@swarm
        - traefik.http.services.frontend.loadbalancer.server.port=4000
        - traefik.http.middlewares.frontend-secure.headers.sslRedirect=true
        - traefik.http.middlewares.frontend-secure.headers.stsSeconds=31536000
        - traefik.http.middlewares.frontend-secure.headers.stsPreload=true
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "wget", "-q", "--spider", "http://0.0.0.0:4000"]

  backend-server:
    <<: *backend-config
    environment:
      <<: *backend-environment
      FEATURE_MIGRATOR: "true"
      FEATURE_SERVER: "true"
    deploy:
      <<: *common-deploy
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.backend.rule=Host(`api.feedstand.com`)
        - traefik.http.routers.backend.entrypoints=websecure
        - traefik.http.routers.backend.tls=true
        - traefik.http.routers.backend.tls.certresolver=letsencrypt
        - traefik.http.routers.backend.middlewares=backend-secure@swarm
        - traefik.http.services.backend.loadbalancer.server.port=4001
        - traefik.http.middlewares.backend-secure.headers.sslRedirect=true
        - traefik.http.middlewares.backend-secure.headers.stsSeconds=31536000
        - traefik.http.middlewares.backend-secure.headers.stsPreload=true
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "wget", "-q", "--spider", "http://0.0.0.0:4001"]

  backend-worker:
    <<: *backend-config
    environment:
      <<: *backend-environment
      FEATURE_WORKER: "true"
    deploy:
      <<: *common-deploy
      replicas: 4
      update_config:
        parallelism: 4
        delay: 30s
        order: start-first
      placement:
        constraints:
          - node.role != manager
          - node.labels.worker == true
        preferences:
          - spread: node.id
      # resources:
      #   limits:
      #     memory: 512MB
      #     cpus: "0.5"
      #   reservations:
      #     memory: 128M
      #     cpus: "0.1"

  pgbouncer:
    image: edoburu/pgbouncer
    environment:
      DB_HOST: database
      DB_NAME: ${BACKEND_DATABASE_NAME}
      DB_USER: ${BACKEND_DATABASE_USER}
      DB_PASSWORD: ${BACKEND_DATABASE_PASS}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 500
      DEFAULT_POOL_SIZE: 50
      MAX_DB_CONNECTIONS: 100
      RESERVE_POOL_SIZE: 25
      RESERVE_POOL_TIMEOUT: 5
      ADMIN_USERS: ${BACKEND_DATABASE_USER}
      AUTH_TYPE: scram-sha-256
    deploy:
      <<: *common-deploy
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.tcp.routers.pgbouncer.rule=HostSNI(`*`)
        - traefik.tcp.routers.pgbouncer.entrypoints=pgbouncer
        - traefik.tcp.services.pgbouncer.loadbalancer.server.port=5432
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${DATABASE_USER}"]
    depends_on:
      - database

  database:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${BACKEND_DATABASE_NAME}
      POSTGRES_USER: ${BACKEND_DATABASE_USER}
      POSTGRES_PASSWORD: ${BACKEND_DATABASE_PASS}
    deploy:
      <<: *common-deploy
      placement:
        constraints:
          - node.role == manager
    volumes:
      - database_data:/var/lib/postgresql/data
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${DATABASE_USER}"]

  queue:
    image: redis:7-alpine
    command:
      - "redis-server"
      - "--save ''"
      - "--appendonly yes"
      - "--appendfsync everysec"
      - "--no-appendfsync-on-rewrite yes"
      - "--auto-aof-rewrite-percentage 100"
      - "--auto-aof-rewrite-min-size 256mb"
      - "--aof-rewrite-incremental-fsync yes"
      - "--maxmemory-policy allkeys-lru"
      - "--aof-use-rdb-preamble yes"
    deploy:
      <<: *common-deploy
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.tcp.routers.queue.rule=HostSNI(`*`)
        - traefik.tcp.routers.queue.entrypoints=queue
        - traefik.tcp.services.queue.loadbalancer.server.port=6379
    volumes:
      - queue_data:/data
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "redis-cli", "ping"]

volumes:
  letsencrypt_data:
    driver: local
  database_data:
    driver: local
  queue_data:
    driver: local
